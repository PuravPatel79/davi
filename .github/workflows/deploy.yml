name: davi CI/CD Pipeline

on:
  push:
    branches:
      - "main"

env:
  ECR_REPOSITORY_FRONTEND: davi-frontend
  ECR_REPOSITORY_BACKEND: davi-backend
  ECR_REPOSITORY_SANDBOX: davi-sandbox
  ECS_SERVICE: davi-service
  ECS_CLUSTER: davi-cluster
  ECS_TASK_DEFINITION_TEMPLATE: ecs/task-definition.json
  AWS_REGION: us-east-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::231712211814:role/GitHubActions-davi-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push backend image
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Build, tag, and push sandbox image
        id: build-sandbox-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_SANDBOX:$IMAGE_TAG -f ./backend/Dockerfile.sandbox ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_SANDBOX:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_SANDBOX:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create new task definition file with updated values
        id: task-def-file
        run: |
          # Create a new file for the updated task definition
          cp $ECS_TASK_DEFINITION_TEMPLATE task-definition.json

          # Replace the image placeholders
          sed -i "s|IMAGE_PLACEHOLDER_FRONTEND|${{ steps.build-frontend-image.outputs.image }}|g" task-definition.json
          sed -i "s|IMAGE_PLACEHOLDER_BACKEND|${{ steps.build-backend-image.outputs.image }}|g" task-definition.json
          
          # Replace the API key placeholder
          sed -i "s|API_KEY_PLACEHOLDER|${{ secrets.GOOGLE_API_KEY }}|g" task-definition.json
          
          # Output the path to the new file
          echo "task_definition_path=task-definition.json" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-file.outputs.task_definition_path }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true