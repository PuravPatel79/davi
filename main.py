import os
import sys
import json
import plotly.io as pio
from dotenv import load_dotenv
import webbrowser
from src.data_processor import DataProcessor
from src.visualizer import Visualizer
from src.agent import DataAnalysisAgent

# Load environment variables from .env file
load_dotenv()

DASHBOARD_HTML_FILE = "dashboard.html"

def display_menu():
    """Displays the main menu options to the user."""
    print("\n-----------------------------------")
    print("Main Menu")
    print("-----------------------------------")
    print("What would you like to do?")
    print("1. Ask informational questions about the data")
    print("2. Request data visualizations")
    print("3. Generate SQL from natural language")
    print("4. Exit")
    print("-----------------------------------")

def handle_informational_queries(agent):
    """Handles the sub-menu loop for informational queries."""
    print("\n--- Informational Query Mode ---")
    print("Type your questions below. Type exactly 'back' to return to the main menu.")
    while True:
        query = input("\nEnter your informational query (or 'back'): ")
        if query.strip().lower() == 'back':
            break  # Exit informational sub-loop

        print("\nProcessing your query...")
        # Pass mode="informational"
        result = agent.process_query(query, mode="informational")
        
        # Display result
        if result.get("success", False):
            print("\nAnalysis Result:")
            print(result["message"])
            # Check if a visualization was unexpectedly created
            if result.get("visualization") is not None:
                print("\nWarning: A visualization was generated unexpectedly in informational mode.")
        else:
            print("\nError:")
            print(result.get("message", "Unknown error occurred"))

def handle_nlp_to_sql_queries(agent):
    """Handles the sub-menu loop for NLP to SQL conversion queries."""
    print("\n--- NLP to SQL Conversion Mode ---")
    print("Type your natural language questions below to get SQL queries.")
    print("Type exactly 'back' to return to the main menu.")
    
    while True:
        query = input("\nEnter your natural language query (or 'back'): ")
        if query.strip().lower() == 'back':
            break  # Exit NLP to SQL sub-loop

        print("\nGenerating SQL query...")
        # Pass mode="sql"
        result = agent.process_query(query, mode="sql")
        
        # Display result
        if result.get("success", False):
            print("\nGenerated SQL:")
            print(result["message"])
            
            # If there's a detailed explanation available, show it
            if result.get("explanation"):
                print("\nExplanation:")
                print(result["explanation"])
        else:
            print("\nError:")
            print(result.get("message", "Unknown error occurred"))

def generate_and_show_html_dashboard(visualizations):
    """Generates a single HTML file containing all visualizations using fig.to_html(include_plotlyjs=False) and opens it."""
    if not visualizations:
        print("No visualizations have been generated yet.")
        return

    print(f"\nGenerating dashboard with {len(visualizations)} visualization(s)...")
    
    # --- HTML Head (Includes Plotly JS CDN) --- 
    html_head = """<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Visualization Dashboard</title>
    <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
    <style>
        body { font-family: sans-serif; margin: 20px; }
        /* Style the container holding the plotly div */
        .chart-container { margin-bottom: 30px; border: 1px solid #eee; padding: 10px; }
        /* Plotly divs themselves often need height/width */
        .plotly-graph-div { min-height: 450px; width: 100%; }
        h1 { text-align: center; }
        h2 { margin-top: 40px; }
    </style>
</head>
<body>
    <h1>Visualization Dashboard</h1>
"""
    
    # --- HTML Body Content (Divs generated by Plotly) --- 
    html_body_content = ""
    valid_viz_count = 0
    for i, fig in enumerate(visualizations):
        # Check if it's a Plotly figure
        if hasattr(fig, "to_html") and hasattr(fig, "layout"):
            try:
                # Get HTML div for the figure, relying on the single Plotly JS loaded in the <head>
                fig_div_html = fig.to_html(full_html=False, include_plotlyjs='cdn')                
                
                # Add title and a container for the figure's div
                html_body_content += f'    <h2>Visualization {valid_viz_count + 1}</h2>\n'
                # Wrap the plotly-generated div in the styled container
                html_body_content += f'    <div class="chart-container">{fig_div_html}</div>\n'
                html_body_content += "    <hr>\n"
                valid_viz_count += 1
            except Exception as html_err:
                print(f"Warning: Could not convert figure {i+1} to HTML div. Skipping. Error: {html_err}")
        else:
            print(f"Warning: Item {i+1} is not a Plotly figure, skipping.")

    # --- HTML Footer --- 
    html_footer = """</body>
</html>"""

    # --- Combine and Write --- 
    if valid_viz_count == 0:
        print("No valid Plotly figures were found to generate the dashboard.")
        return
        
    final_html = html_head + html_body_content + html_footer
    
    try:
        with open(DASHBOARD_HTML_FILE, 'w', encoding='utf-8') as f:
            f.write(final_html)
        print(f"Dashboard saved to {DASHBOARD_HTML_FILE}")

        # Try to open in browser
        try:
            webbrowser.open('file://' + os.path.realpath(DASHBOARD_HTML_FILE))
            print("Dashboard opened in browser.")
        except Exception as wb_error:
            print(f"Could not open browser automatically: {wb_error}")
            print(f"Please open {DASHBOARD_HTML_FILE} manually.")

    except Exception as e:
        print(f"Error generating or showing HTML dashboard: {str(e)}")

def handle_visualization_requests(agent):
    """Handles the sub-menu loop for visualization requests, storing visualizations."""
    stored_visualizations = []
    print("\n--- Visualization Request Mode ---")
    print("Type your requests below.")
    print("Type exactly 'show dashboard' to view collected visualizations in a single HTML file.")
    print("Type exactly 'back' to return to the main menu.")
    
    while True:
        query = input("\nEnter your visualization request (or 'show dashboard' or 'back'): ")
        query_lower = query.strip().lower()

        if query_lower == 'back':
            break  # Exit visualization sub-loop
        
        if query_lower == 'show dashboard':
            generate_and_show_html_dashboard(stored_visualizations)
            # If you want to clear the dashboard after every 'show dashboard' command then you can uncomment the line below.
            # stored_visualizations = []
            continue # Go back to asking for input

        print("\nProcessing your visualization request...")
        # Pass mode="visualization"
        result = agent.process_query(query, mode="visualization")
        
        # Display result and store visualization
        if result.get("success", False):
            print("\nAnalysis Result:")
            print(result["message"])
            
            # Store visualization if created
            visualization = result.get("visualization")
            if visualization is not None:
                # Check if it's a Plotly figure
                if hasattr(visualization, "to_json") and hasattr(visualization, "layout"):
                    print("Visualization generated and stored for the dashboard.")
                    stored_visualizations.append(visualization)
                else:
                    print("Note: The agent returned something for visualization, but it doesn't look like a Plotly figure. Not stored.")
        else:
            print("\nError:")
            print(result.get("message", "Unknown error occurred"))

def main():
    # Initialize components
    data_processor = DataProcessor()
    visualizer = Visualizer(data_processor)
    
    # Get Gemini API key from environment
    gemini_api_key = os.getenv("GOOGLE_API_KEY")
    
    # Initialize agent
    try:
        agent = DataAnalysisAgent(data_processor, visualizer, gemini_api_key)
    except ValueError as e:
        print(f"Error initializing agent: {str(e)}")
        print("Please set your GOOGLE_API_KEY environment variable or create a .env file with it.")
        return
    except Exception as e:
        print(f"An unexpected error occurred during agent initialization: {str(e)}")
        return
    
    print("davi says Hello!")
    print("================")
    
    # Load data
    data_path = input("Enter path to your data file (CSV or Excel) or URL: ")
    try:
        data_processor.load_data(data_path)
        print(f"Data loaded successfully. Shape: {data_processor.metadata['shape']}")
        print("\nColumn information:")
        print(data_processor.get_column_info())
    except FileNotFoundError:
        print(f"Error: File not found at {data_path}")
        return
    except Exception as e:
        print(f"Error loading data: {str(e)}")
        return
    
    # Interactive menu loop
    while True:
        display_menu()
        choice = input("Enter your choice (1, 2, 3, or 4): ")

        if choice == '1':
            handle_informational_queries(agent)
        elif choice == '2':
            handle_visualization_requests(agent)
        elif choice == '3':
            handle_nlp_to_sql_queries(agent)
        elif choice == '4':
            print("Exiting. davi says Goodbye!")
            break
        else:
            print("Invalid choice. Please enter 1, 2, 3, or 4.")

if __name__ == "__main__":
    main()